/**
 * Represents a single row in the trade history.
 * As defined in REQUIREMENTS.md §5.3.3
 */
export interface TradeRow {
  id: number; // 連番 (1~)
  code: string; // '7203.T'
  side: "long"; // MVP は long 固定
  entryDate: string; // ISO-8601 (YYYY-MM-DD)
  exitDate: string; // ISO-8601
  qty: number; // 株数 (整数)
  entryPx: number; // 円
  exitPx: number; // 円
  slippageBp: number; // 片道 bps (entry と exit 同一)
  pnl: number; // 円 (手数料・スリッページ込)
  pnlPct: number; // (exitPx-entryPx)/entryPx
  duration: number; // 日数 (= exitDate-entryDate)
}

/**
 * Message structure for requests sent from the UI to the Web Worker.
 * As defined in REQUIREMENTS.md §5.1
 */
export interface BacktestRequest {
  req_id: string; // UUIDv4, generated by UI
  sql: string; // Compiled SQL query (including WITH, WINDOW clauses)
  arrow: Uint8Array; // Arrow IPC binary data (transferable)
  params: {
    initCash: number; // Initial cash for the backtest
    slippageBp: number; // Slippage in basis points (one-way)
  };
}

/**
 * Message structure for responses sent from the Web Worker to the UI.
 * As defined in REQUIREMENTS.md §5.1
 */
export interface BacktestResponse {
  req_id: string;
  metrics: {
    cagr: number | null; // CAGR (ratio, e.g. 0.1234)
    maxDd: number | null; // Max Drawdown (ratio, positive)
    sharpe: number | null; // Sharpe ratio
  } | null; // metrics自体もnullになりうる (計算不可の場合)
  equityCurve: { date: string; equity: number }[]; // 終値ベース
  trades: TradeRow[];
  warnings?: string[];
}

/**
 * Union type for messages passed between UI and Worker.
 * Includes progress and error messages as per REQUIREMENTS.md §5.2
 */
export type WorkerMessage =
  | ({ type: "result" } & BacktestResponse)
  | { type: "progress"; req_id: string; progress: number; message?: string }
  | { type: "error"; req_id: string; message: string; code?: string }; // Added optional error code
